# Copyright 2009 Mike Kelly
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'vim-plugin.eclass', which is:
#     Copyright 1999-2004 Gentoo Foundation
#
# This exlib simplifies installation of app-vim plugins into
# /usr/share/vim/vimfiles.  This is a version-independent directory
# which is read automatically by vim.  The only exception is
# documentation, for which we make a special case via vim-doc.eclass

require vim-doc

# options required in vim/gvim. e.g. [lua], defaults to empty
myexparam vim_options=
exparam -v VIM_PLUGIN_VIM_OPTIONS vim_options
# minimum required vim/gvim version, defaults to 6.4
myexparam vim_version=6.4
exparam -v VIM_PLUGIN_VIM_VERSION vim_version
# script_id from vim.org, for HOMEPAGE and REMOTE_IDS
myexparam script_id=
exparam -v VIM_SCRIPT_ID script_id
# src_id from vim.org, for DOWNLOADS
myexparam src_id=
exparam -v VIM_SRC_ID src_id
# suffix for the renamed source file, defaults to .zip
myexparam src_suffix=zip
exparam -v VIM_SRC_SUFFIX src_suffix
# if suffix is 'vim', where the file should be installed
myexparam script_type=
exparam -v VIM_SCRIPT_TYPE script_type

DEPENDENCIES="
    build+run:
        || (
            app-editors/vim[>=${VIM_PLUGIN_VIM_VERSION}]${VIM_PLUGIN_VIM_OPTIONS}
            app-editors/gvim[>=${VIM_PLUGIN_VIM_VERSION}]${VIM_PLUGIN_VIM_OPTIONS}
        )
"

if [[ -n "${VIM_SCRIPT_ID}" ]] ; then
    REMOTE_IDS="vim:${VIM_SCRIPT_ID}"
    HOMEPAGE="http://www.vim.org/scripts/script.php?script_id=${VIM_SCRIPT_ID}"
fi
if [[ -n "${VIM_SRC_ID}" ]] ; then
    [[ ${VIM_SRC_SUFFIX} == zip ]] && DEPENDENCIES+=" build: virtual/unzip"
    DOWNLOADS="http://www.vim.org/scripts/download_script.php?src_id=${VIM_SRC_ID} -> ${PNV}.${VIM_SRC_SUFFIX}"
    WORK="${WORKBASE}"
fi

LICENCES="vim"

BUGS_TO="pioto@exherbo.org"

export_exlib_phases src_unpack src_install pkg_postinst pkg_postrm

vim-plugin_src_unpack() {
    default
    [[ "${VIM_SRC_SUFFIX}" == 'vim' && -n "${VIM_SCRIPT_TYPE}" ]] || return
    mkdir "${VIM_SCRIPT_TYPE}"/
    cp "${FETCHEDDIR}/${PNV}.vim" "${VIM_SCRIPT_TYPE}/${PN}.vim"
}

vim-plugin_src_install() {
    local f

    # Install non-vim-help-docs
    cd "${WORK}"
    for f in *; do
        [[ -f ${f} ]] || continue
        dodoc "${f}"
        rm -f "${f}"
    done

    edo rm -rf ${WORK}/.git*

    # Install remainder of plugin
    cd "${WORKBASE}"
    dodir /usr/share/vim
    edo mv "${WORK}" "${IMAGE}"/usr/share/vim/vimfiles

    # Fix remaining bad permissions
    edo chmod -R -x+X "${IMAGE}"/usr/share/vim/vimfiles/
}

vim-plugin_pkg_postinst() {
    update_vim_helptags     # from vim-doc
    update_vim_afterscripts # see below
}

vim-plugin_pkg_postrm() {
    update_vim_helptags     # from vim-doc
    update_vim_afterscripts # see below
}

# update_vim_afterscripts: create scripts in
# /usr/share/vim/vimfiles/after/* comprised of the snippets in
# /usr/share/vim/vimfiles/after/*/*.d
update_vim_afterscripts() {
    illegal_in_global_scope

    local d f afterdir=${ROOT}/usr/share/vim/vimfiles/after

    # Nothing to do if the dir isn't there
    [[ -d ${afterdir} ]] || return 0

    einfo "Updating scripts in /usr/share/vim/vimfiles/after"
    find "${afterdir}" -type d -name \*.vim.d | \
    while read d; do
        echo '" Generated by update_vim_afterscripts' > "${d%.d}"
        find "${d}" -name \*.vim -type f -maxdepth 1 -print0 | \
        sort -z | xargs -0 cat >> "${d%.d}"
    done

    einfo "Removing dead scripts in /usr/share/vim/vimfiles/after"
    find "${afterdir}" -type f -name \*.vim | \
    while read f; do
        [[ "$(head -n 1 ${f})" == '" Generated by update_vim_afterscripts' ]] || continue

        # This is a generated file, but might be abandoned.  Check
        # if there's no corresponding .d directory, or if the
        # file's effectively empty
        if [[ ! -d "${f}.d" || -z "$(grep -v '^"' "${f}")" ]]; then
            rm -f "${f}"
        fi
    done
}

