# Copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/eclass/toolchain-funcs.eclass,v 1.69 2007/03/27 01:46:50 vapier Exp $
#
# This exlib contains functions to get common info about
# the toolchain (libc/compiler/binutils/etc...)

libc-is-glibc() {
    illegal_in_global_scope
    [[ "$(exhost --target)" == *-gnu* ]]
}

libc-is-musl() {
    illegal_in_global_scope
    [[ "$(exhost --target)" == *-musl* ]]
}

cc-has-defined() {
    illegal_in_global_scope
    "${CC}" ${CFLAGS} -x c -dM -E /dev/null -o - | grep -q "${1}"
}

cxx-has-defined() {
    illegal_in_global_scope
    "${CXX}" ${CXXFLAGS} -x c++ -dM -E /dev/null -o - | grep -q "${1}"
}

cc-is-clang() {
    illegal_in_global_scope
    cc-has-defined __clang__
}

cc-is-gcc() {
    illegal_in_global_scope
    ! cc-is-clang && cc-has-defined __GNUC__
}

cxx-is-clang() {
    illegal_in_global_scope
    cxx-has-defined __clang__
}

cxx-is-gcc() {
    illegal_in_global_scope
    ! cxx-is-clang && cxx-has-defined __GNUC__
}

# Returns the version as by `$CC -dumpversion`
gcc-fullversion() {
    illegal_in_global_scope

    "${CC}" "$@" -dumpversion
}
# Returns the version, but only the <major>.<minor>
gcc-version() {
    illegal_in_global_scope

    gcc-fullversion "$@" | cut -f1,2 -d.
}
# Returns the Major version
gcc-major-version() {
    illegal_in_global_scope

    gcc-version "$@" | cut -f1 -d.
}
# Returns the Minor version
gcc-minor-version() {
    illegal_in_global_scope

    gcc-version "$@" | cut -f2 -d.
}
# Returns the Micro version
gcc-micro-version() {
    illegal_in_global_scope

    gcc-fullversion "$@" | cut -f3 -d. | cut -f1 -d-
}

# Returns the version as by `$CXX -dumpversion`
gxx-fullversion() {
    illegal_in_global_scope

    "${CXX}" "$@" -dumpversion
}
# Returns the version, but only the <major>.<minor>
gxx-version() {
    illegal_in_global_scope

    gxx-fullversion "$@" | cut -f1,2 -d.
}
# Returns the Major version
gxx-major-version() {
    illegal_in_global_scope

    gxx-version "$@" | cut -f1 -d.
}
# Returns the Minor version
gxx-minor-version() {
    illegal_in_global_scope

    gxx-version "$@" | cut -f2 -d.
}
# Returns the Micro version
gxx-micro-version() {
    illegal_in_global_scope

    gxx-fullversion "$@" | cut -f3 -d. | cut -f1 -d-
}

# Check whether our selected compiler supports visibility
has_visibility() {
    illegal_in_global_scope

    # We need >=sys-devel/gcc-4.1
    [[ "${CC}" == *gcc* && $(gcc-major-version)$(gcc-minor-version) -ge 41 ]] || return 1
}

