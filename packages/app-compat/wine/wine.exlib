# Modified by Jacob Hrbek <kreyren@rixotstudio.cz> in 2019 under the terms of GNUv3 (https://www.gnu.org/licenses/gpl-3.0.en.html)
# Modified by Wulf C. Krueger <philantrop@exherbo.org> in 2009-2018 under the terms of GNUv2 (https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)
# Created by Kylie McClain <somasis@exherbo.org> in 2015 under the terms of GNUv2 (https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)
# Based in part on app-emulation/wine from github.com/bobwya/bobwya which is:
# 	Copyright 2017-2019 Robert Walker <FIXME_EMAIL> under the terms of GNUv2 (https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)

# shellcheck shell=bash # Paludis doesn't expect shebang, Exheres are using arrays which are not supported in POSIX sh
# shellcheck source=/usr/x86_64-pc-linux-gnu/libexec/paludis/ebuild.bash # Used to resolve SC2154 (needs sanity check)

# FIXME: Can this be sourced?
# shellcheck disable=SC2034 # Appears unused is invalid for paludis variables

: '
	This is library used for building WINE on paludis-based operating systems

	Features:
	- Builds on Linux (in progress..)

	TODO:
	- Implement fetching master version (scm)
	- Implement logic for fetching legacy wine which uses different download uri (https://github.com/Winetricks/winetricks/pull/1348/files)
	- Implement auto-bumps
	- Implement staging
	- Implement mono
		- Hotfixed - Providing prebuilt version only (FIXME!)
		- Allow end-user to choose mono version
	- Implement gecko
		- Hotfixed - Providing prebuilt version only (FIXME!)
		- Allow end-user to choose gecko version
	- Implement shellcheck QA adapted for paludis
	- Implement building of package on multiple platforms for verification (CI)
	- Deploy binary if all the checks pass (CD)
	- Build on Linux
	- Build on MacOS
	- Build on FreeBSD
	- Build on Redox (Stubbed, redox not ready for development)
'

# NOTE: see dlls/appwiz.cpl/addons.c's GECKO_VERSION/MONO_VERSION macros
myexparam gecko_version
	exparam -v GECKO_PV gecko_version
myexparam mono_version
	exparam -v MONO_PV mono_version

## PALUDIS CONTRIB ##
: '
	These are expected to be contributed in paludis, currently added for development
'
# Output fixme messages for unimplemented features
# TODO: Implement in paludis
fixme() { printf 'FIXME: %s\n' "$1" ;}

# Output debug messages for easier debugging
# TODO: Implement in paludis with integration for CI
debug() { [ -n "$DEBUG" ] && printf "DEBUG(${FUNCNAME[1]}): %s\\n" "$1" ;}

# TODO: Implement in paludis to handle from a userland
#DEBUG=y # DO_NOT_MERGE: Remove me for production

# (Exheredrey) Info to resolve these kinds of conflicts was not provided, this is my solution. Provide required info to resolve if needed.
# TODO: Update docs for shimming
# TODO: Implement this in paludis
bannedrey() {
	: "
		Shim banned function

		Wrapper to symlink required commands in case they are banned by distribution
		- Creates a $SHIMDIR
		- Symlinks $SHIMPATH/$command in SHIMDIR/$command
		- Output warning if $command is not longer banned

		This may require exporting $PATH with $SHIMDIR, note that SMIDIR is not recognized outside of this function
			export PATH="$PATH:$SHIMDIR"
	"
	local SHIMDIR="$WORKBASE/shims"
	# INFO: This is to resolve SC2155 while not exporting SHIMPATH outside of the function
	local SHIMPATH
	SHIMPATH="/usr/host/bin/$(exhost --tool-prefix)$command"
	local BANDIR="/usr/share/exherbo/banned_by_distribution/"
	local command="$1"

	# Check if command is banned
	if [ -e "$BANDIR/$command" ]; then
		ewarn "Command '$command' is banned by distribution, shimming.."

		# Create a SHIMDIR
		if [ ! -d "$SHIMDIR" ]; then
			mkdir "$SHIMDIR" || die "Unable to make a new directory in '$SHIMDIR'"
		elif [ -f "$SHIMDIR" ]; then
			die "bug: pathname '$SHIMDIR' points to a file where directory is expected, did upstream made a new file that conflicts with exlib logic?"
		elif [ -d "$SHIMDIR" ]; then
			true
		else
			die "Unexpected happend in ${FUNCNAME[0]} while checking for $SHIMDIR"
		fi

		# Shim
		if [ ! -h "$SHIMDIR/$command" ]; then
			ln -s "$SHIMPATH$command" "$SHIMDIR/$command" || die "Unable to make a symlink from $SHIMPATH$command' in '$SHIMDIR/$command' used for shimming."
		elif [ -h "$SHIMDIR/$command" ]; then
			true
		else
			die "Unexpected happend in ${FUNCNAME[0]} - Shimming"
		fi

		# Export PATH
		case "$PATH" in
			*:$SHIMDIR) debug "PATH '$PATH' already contains '$SHIMDIR', skipping export" ;;
			*)
				export PATH="$SHIMDIR:$PATH"
				debug "SHIMDIR has been exported in PATH : '$PATH'"
		esac

		# Self-check
		"$command" --version &>/dev/null || die "bug: ${FUNCNAME[0]} logic didn't export shim correctly"

	elif [ ! -e "$BANDIR/$command" ]; then
		ewarn "bug: Command '$command' is not banned, skipping shimming.."
	else
		die "Unexpected in ${FUNCNAME[0]}"
	fi
}

# Metadata #

SUMMARY="Compatibility layer capable of running Windows applications"
DESCRIPTION="
	Wine is an implementation of the Windows API on top of X and Unix. It does not require Microsoft Windows, but can use native Windows DLLs if they are available. It provides both a development toolkit for porting Windows source code to Unix as well as a program loader, allowing many unmodified Windows programs to run on x86-based Unixes."
HOMEPAGE="
	https://www.winehq.org"
# FIXME: Fix duplicates for gecko targets
# FIXME: Fix handling for different versions
DOWNLOADS="
	https://dl.winehq.org/wine/source/4.x/wine-$PV.tar.xz
	mono? (
		https://dl.winehq.org/wine/wine-mono/$MONO_PV/wine-mono-$MONO_PV.msi
	)
	gecko? (
		https://dl.winehq.org/wine/wine-gecko/$GECKO_PV/wine_gecko-$GECKO_PV-x86.msi
		targets:x86_64-pc-linux-gnu? (
			https://dl.winehq.org/wine/wine-gecko/$GECKO_PV/wine_gecko-$GECKO_PV-x86_64.msi
		)
		targets:x86_64-pc-linux-musl? (
			https://dl.winehq.org/wine/wine-gecko/$GECKO_PV/wine_gecko-$GECKO_PV-x86_64.msi
		)
	)
	staging? ( LGPL-2.1 [[ note = [ wine-staging ] ]] )"
BUGS_TO="
	exherbo.gitlab+kreyren-exheredrey-779-2e93xao4j6itjj8byb9pqb5vc-issue@gmail.com"
UPSTREAM_CHANGELOG="
	$HOMEPAGE/news/ [[ lang = en ]]"
UPSTREAM_DOCUMENTATION="
	${HOMEPAGE//www./wiki.}/Main_Page [[ lang = en description = [ WineHQ Wiki ] ]]
	${HOMEPAGE//www./wiki.}/StartSeite [[ lang = de description = [ WineHQ Wiki ] ]]
	${HOMEPAGE//www./wiki.}/Main_Page_ko [[ lang = ko description = [ WineHQ Wiki ] ]]
	${HOMEPAGE//www./wiki.}/Wine_Developer%27s_Guide [[ lang = en description = [ WineHQ developer guide ] ]]"
LICENCES="
	LGPL-2.1 [[ note = [ wine ] ]]
	MPL-2.0 [[ note = [ wine-gecko ] ]]
	LGPL-2 [[ note = [ wine-mono ] ]]"
SLOT="0" # Slotting is not needed


# Technical #

# Verification of 'camera' deps in 'build+run' required
# Verification of 'isdn' deps in 'build+run' required
DEPENDENCIES=(
	"build:"
		"sys-devel/bison"
		"sys-devel/flex[>=2.6.4] [[ note = [ https://bugs.winehq.org/show_bug.cgi?id=42132 ] ]]"
		"sys-devel/gettext"
		"virtual/pkg-config"
		"x11-proto/xorgproto"
	"build+run:"
		"alsa? ( sys-sound/alsa-lib )" # QA?
		"camera? ( media-libs/libgphoto2 )" # QA?
		"cups? ( net-print/cups )" # QA?
		"dbus? ( sys-apps/dbus )" # QA?
		"faudio? ( media-libs/faudio )" # QA?
		"ffmpeg? ( media/ffmpeg )" # QA?
		"fontconfig? ("
			"media-libs/fontconfig" # QA?
			"media-libs/freetype:2[>=2.0.0]" # QA?
		")"
		"gsm? ( media-libs/gsm )" # QA?
		"gstreamer? ("
			"media-libs/gstreamer:1.0" # QA?
			"media-plugins/gst-plugins-base:1.0" # QA?
		")"
		"openal? ( media-libs/openal )" # QA?
		"opengl? ("
			"x11-dri/glu" # QA?
			"x11-dri/mesa[>=9.0]" # QA?
		")"
		"oss? ( sys-sound/oss )" # QA?
		"pcap? ( dev-libs/libpcap )" # QA?
		"png? ( media-libs/libpng )" # QA?
		"pulseaudio? ( media-sound/pulseaudio )" # QA?
		"providers:eudev? ( sys-apps/eudev )" # QA?
		"providers:ijg-jpeg? ( media-libs/jpeg:= )" # QA?
		"providers:jpeg-turbo? ( media-libs/libjpeg-turbo )" # QA?
		"providers:systemd? ( sys-apps/systemd )" # QA?
		"samba? ( net-fs/samba[>=3.0.25] )"# QA?
		"sdl? ( media-libs/SDL:2 )" # QA?
		"tiff? ( media-libs/tiff )" # QA?
		"isdn? ( dev-libs/libcapi20 )" # QA?
		"jpeg? ( media-libs/jpeg )"
		"kerberos? ("
			"providers:heimdal? ( app-crypt/heimdal )"
			"providers:krb5? ( app-crypt/krb5 )"
		")"
		"vkd3d? ( app-emulation/vkd3d )" # QA?
		"vulkan? ( sys-libs/vulkan-loader[X?][wayland?] )" # QA?
		"wayland? ( sys-libs/wayland )" # QA?
		"xinerama? ( x11-libs/libXinerama )" # QA?
		"xml? ( dev-libs/libxml )" # QA?
		"xrandr? ( x11-libs/libXrandr )" # QA?
		"X? (" # Based on https://github.com/bobwya/bobwya/blob/master/app-emulation/wine-staging/wine-staging-4.9_p1-r3.ebuild#L41
			"x11-libs/libXcursor" # QA?
			"x11-libs/libXext" # QA?
			"x11-libs/libXfixes" # QA?
			"x11-libs/libXi" # QA?
			"x11-libs/libXxf86vm" # QA?
		")"
		"zlib? ( sys-libs/zlib )" # QA?
	"suggestion:"
		"fonts/corefonts [[ description = [ Microsoft(R) Core fonts ] ]]"
)
# FIXME: Test other platforms
CROSS_COMPILE_TARGETS="
	aarch64-unknown-linux-gnueabi
	aarch64-unknown-linux-musleabi
	armv4-unknown-linux-gnueabi
	armv4-unknown-linux-gnueabihf
	armv4-unknown-linux-musleabi
	armv4-unknown-linux-musleabihf
	armv5-unknown-linux-gnueabi
	armv5-unknown-linux-gnueabihf
	armv5-unknown-linux-musleabi
	armv5-unknown-linux-musleabihf
	armv6-unknown-linux-gnueabi
	armv6-unknown-linux-gnueabihf
	armv6-unknown-linux-musleabi
	armv6-unknown-linux-musleabihf
	armv7-unknown-linux-gnueabi
	armv7-unknown-linux-gnueabihf
	armv7-unknown-linux-musleabi
	armv7-unknown-linux-musleabihf
	i686-pc-linux-gnu
	i686-pc-linux-musl
	ia64-unknown-linux-gnu
	powerpc64-unknown-linux-gnu
	x86_64-pc-linux-gnu
	x86_64-pc-linux-musl"

# DO_NOT_MERGE: Remove array once options are determined
# Do not add `+=`, expected to be declared first by design
myMYOPTIONS=(
	"alsa"
	"capi"
	"cms"
	"coreaudio"
	"cups"
	"curses"
	"dbus"
	"faudio"
	"fontconfig"
	"freetype"
	"gettext"
	"gettextpo"
	"gphoto"
	"glu"
	"gnutls"
	"gecko"
	"gsm"
	"gssapi"
	"gstreamer"
	"hal"
	"inotify"
	"jpeg"
	"krb5"
	"ldap"
	"mingw"
	"mono"
	"mpg123"
	"netapi"
	"openal"
	"opencl"
	"opengl"
	"osmesa [[ requires = opengl ]]" # osmesa - requires opengl (https://github.com/bobwya/bobwya/blob/master/app-emulation/wine-vanilla/wine-vanilla-4.9_p1-r2.ebuild#L33)
	"oss"
	"pcap"
	"png"
	"pthread"
	"pulse"
	"sane"
	"sdl"
	"staging"
	"tiff"
	"udev"
	"unwind"
	"v4l2"
	"vkd3d [[ requires = vulkan ]]" # vkd3d needs vulkan (https://github.com/bobwya/bobwya/blob/master/app-emulation/wine-vanilla/wine-vanilla-4.9_p1-r2.ebuild#L35)
	"vulkan"
	"X"
	"xcomposite"
	"xcursor"
	"xfixes"
	"xinerama [[ requires = X ]]"
	"xinput"
	"xinput2"
	"xml"
	"xrandr"
	"xrender"
	"xshape"
	"xshm"
	"xslt"
	"xxf86vm"
	"wayland"
	"zlib"
	"syswow64"
	"( targets: $CROSS_COMPILE_TARGETS ) [[ number-selected = at-least-one ]]"
)
# MYOPTIONS doesnt accept arrays, this is workaround (FIXME?)
MYOPTIONS="${myMYOPTIONS[*]}"

pkg_setup() {
	ewarn "Not all platforms were tested, report a bug to $BUGS_TO if you encountered an issue"
	fixme "Only vulkan-loader is currently implemented, fixme!"
}

# Unpack source
src_unpack() {
	# INFO: ARCHIVES points to a filename of downloaded file in DOWNLOADS value
	if [ -n "$ARCHIVES" ]; then
		unpack --if-compressed "$ARCHIVES"
	elif [ -z "$ARCHIVES" ]; then
		die "Unable to unpack wine source, Variable ARCHIVES is blank"
	else
		die "Unexpected in src_unpack, checking archives"
	fi
}

src_configure() {
	einfo "Applying configuration"

	# (Exheredrey) Curly brackets are apparently needed
	DEFAULT_SRC_CONFIGURE_PARAMS+=(
		"--build=$(exhost --build)/"
		"--host=$(exhost --target)/"
		"--prefix=/usr/$(exhost --target)/"
		'--bindir=${prefix}/bin/'
		'--sbindir=${prefix}/sbin/'
		'--libdir=${prefix}/lib64/'
		'--datadir=/usr/share/'
		'--datarootdir=/usr/share/'
		"--docdir=/usr/share/doc/$PNVR/" # Expected to be replaced with Package name
		'--infodir=/usr/share/info/'
		'--mandir=/usr/share/man/'
		'--sysconfdir=/etc/'
		'--localstatedir=/var/lib/'
	)

	wine_args() {
	: '
		Helper to assign arguments to generate Makefile based on paludis options

		This helper is tested for app-compat/wine only (19122019)

		Designed to be used in src_prepare()

		Usage:
		wine_args enable X      Enables option 'X'
		wine_args disable X     Disables option 'X'
	'
	local option="$1"
	local arg="$2"

	case "$option" in
		check)
			if option $arg; then
				debug "Enabling argument '$arg' which is specified by paludis options"
				DEFAULT_SRC_CONFIGURE_PARAMS+=( "--with-$arg" )
			elif ! option $arg; then
				debug "Disabling argument '$arg' which is not enabled in paludis options"
				#DEFAULT_SRC_CONFIGURE_PARAMS+=( "--without-$arg" )
			else
				die "Unexpected happend in ${FUNCNAME[0]} - enable option"
			fi ;;
		disable)
			fixme "Argument '$arg' is not implemented, forcing to disable"
			DEFAULT_SRC_CONFIGURE_PARAMS+=( "--without-$arg" ) ;;
		*) die "bug: Unexpected happend in ${FUNCNAME[0]} using argument: $arg"
	esac
	}

	wine_args check alsa
	wine_args check dbus
	wine_args check gnutls
	wine_args check gstreamer
	wine_args check hal
	wine_args check jpeg
	wine_args check ldap
	wine_args check openal
	wine_args check opengl
	wine_args check oss
	wine_args check vulkan
	wine_args check tiff
	wine_args check X
	wine_args check xinerama
	wine_args check zlib

	einfo "Excluding unsupported configuration"

	wine_args disable capi
	wine_args disable cms
	wine_args disable coreaudio
	wine_args disable cups
	wine_args disable curses
	wine_args disable faudio
	wine_args disable fontconfig
	wine_args disable freetype
	wine_args disable gettext
	wine_args disable gettextpo
	wine_args disable gphoto
	wine_args disable glu
	wine_args disable gsm
	wine_args disable gssapi
	wine_args disable inotify
	wine_args disable krb5
	wine_args disable mingw
	wine_args disable mpg123
	wine_args disable netapi
	wine_args disable opencl
	wine_args disable osmesa
	wine_args disable pcap
	wine_args disable png
	wine_args disable pthread
	wine_args disable pulse
	wine_args disable sane
	wine_args disable sdl
	wine_args disable udev
	wine_args disable unwind
	wine_args disable v4l2
	wine_args disable vkd3d
	wine_args disable xcomposite
	wine_args disable xcursor
	wine_args disable xfixes
	wine_args disable xinput
	wine_args disable xinput2
	wine_args disable xml
	wine_args disable xrandr
	wine_args disable xrender
	wine_args disable xshape
	wine_args disable xshm
	wine_args disable xslt
	wine_args disable xxf86vm
	# wine_args disable staging
	# wine_args disable mono
	# wine_args disable gecko

	# Build for 64-bit if specified
	## INFO: For wine to build on 64-bit system flag --enable-win64 has to be used
	if option targets:x86_64-pc-linux-gnu || option targets:x86_64-pc-linux-musl; then
		DEFAULT_SRC_CONFIGURE_PARAMS+=( "--enable-win64" )
	elif option i686-pc-linux-gnu || option i686-pc-linux-musl; then
		einfo "This is 32-bit system, we will not build 64-bit binaries"
	else
		die "Unimplemented target '$(exhost --target)' has been used, file a compatibility request to $BUGS_TO"
	fi

	#fixme "Implement handling for recommended_tests, currently forced disable"
		# if option build_options:recommended_tests ; then
			#DEFAULT_SRC_CONFIGURE_PARAMS+=( "--disable-tests" )
		# 	die ping
		# fi

	einfo "Generating Makefile"

	# Action
	if [ -e "$WORKBASE/$PNV/configure" ] && [ ! -e "$WORKBASE/$PNV/Makefile" ]; then
		export FDFLAGS="-Wl,-O2 -Wl, -pthread -lpthread"
		"$WORKBASE/$PNV/configure" "${DEFAULT_SRC_CONFIGURE_PARAMS[@]}" || die "Configuration of $PNV failed"
	elif [ ! -e "$WORKBASE/$PNV/configure" ]; then
		die "bug: Expected file '$WORKBASE/$PNV/configure' does not exists"
	elif [ ! -e "$WORKBASE/$PNV/Makefile" ]; then
		ewarn "FIle '$WORKBASE/$PNV/Makefile' is already present, skipping configure"
	else
		die "Unexpected in src_configure, configure"
	fi
}

src_compile() {
	bannedrey as
	bannedrey ar
	bannedrey ranlib

	# (Exheredrey) I don't know whow to make paludis to recognize this so this is hotfix
	if grep -qF 'output = false' /etc/paludis/output.conf; then
		DEFAULT_SRC_COMPILE_PARAMS+=(
			"--quiet"
		)
	elif ! grep -qF 'output = false' /etc/paludis/output.conf; then
		debug "Output is not disabled, skipping quiet"
	else
		die "Unexpected in ${FUNCNAME[0]} while checking for quiet"
	fi

	emake tools tools/{sfnt2fon,widl,winebuild,winedump,winegcc,wmc,wrc} "${DEFAULT_SRC_COMPILE_PARAMS[@]}"

	emake -C "$WORKBASE/$PNV" "${DEFAULT_SRC_COMPILE_PARAMS[@]}"

	if option syswow64; then
		fixme "Build syswow64"
	fi
}
