# Copyright 2007, 2009, 2010 Mike Kelly <pioto@exherbo.org>
# Copyright 2008 Bo Ã˜rsted Andresen <zlin@exherbo.org>
# Based upon vim.eclass, copyright 1999-2007 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

# Authors:
#   Ryan Phillips <rphillips@gentoo.org>
#   Seemant Kulleen <seemant@gentoo.org>
#   Aron Griffis <agriffis@gentoo.org>
#   Ciaran McCreesh <ciaran.mccreesh@googlemail.com>
#   Mike Kelly <pioto@exherbo.org>

# This exlib handles vim, gvim and vim-runtime.

require vim-doc flag-o-matic alternatives
require github [ pn=vim tag=v${PV} ]

if [[ "${PN}" != 'vim-runtime' ]]; then
    require python [ blacklist="3.1" multibuild=false with_opt=true ]
    require ruby [ multibuild=false with_opt=true ]
    require lua [ multibuild=false with_opt=true ]
fi

[[ "${PN}" != 'gvim' ]] && require bash-completion

export_exlib_phases src_prepare src_configure src_compile src_test src_install pkg_postinst pkg_prerm pkg_postrm

VIM_VERSION="${VIM_VERSION:-$(ever range 1-2)}"

HOMEPAGE="http://www.vim.org/"
LICENCES="vim"
REMOTE_IDS="freecode:vim"
BUGS_TO="pioto@exherbo.org ciaran.mccreesh@googlemail.com"

# ctags dependency allows help tags to be rebuilt properly, along
# with detection of exuberant-ctags by configure.
DEPENDENCIES="
    build:
        sys-devel/autoconf:2.5
        sys-devel/gettext
        virtual/sed
    build+run:
        dev-util/ctags
        sys-libs/ncurses[>=5.2-r2]"

MYOPTIONS=""

if [[ ${PN} != vim-runtime ]]; then
    MYOPTIONS+=" gpm lua perl python ruby
        minimal [[ description = [ Build without runtime scripts (no syntax highlighting, help) ] ]]
        cscope [[ description = [ add support for the cscope code browser ] ]]"
    DEPENDENCIES+="
        build+run:
            gpm?     ( sys-libs/gpm[>=1.19.3] )
            !minimal? ( app-editors/vim-runtime:${VIM_VERSION} )
            perl?    ( dev-lang/perl:= )
            cscope?  ( dev-util/cscope )"
    case ${PN} in
        vim)
        MYOPTIONS+="
            vim-pager [[ description = [ Use vim as a replacement for less ] ]]
            x-clipboard [[ description = [ Link against X11 libraries, for X clipboard support ] ]]"
        DEPENDENCIES+="
            build:
                x-clipboard? (
                    x11-libs/libXt
                    x11-libs/libX11
                    x11-libs/libSM
                    x11-proto/xorgproto )
            run:
                x-clipboard? ( x11-libs/libXt )
            suggestion:
                app-vim/securemodelines [[ description = [ the built in modelines support is insecure ] ]]
            "
        ;;
    esac
fi

vim_src_prepare() {
    # Fixup a script to use awk instead of nawk
    edo sed -i -e "1s|.*|#!/usr/$(exhost --target)/bin/awk -f|" "${WORK}"/runtime/tools/mve.awk

    # Read vimrc and gvimrc from /etc/vim
    echo '#define SYS_VIMRC_FILE "/etc/vim/vimrc"' >> "${WORK}"/src/feature.h
    echo '#define SYS_GVIMRC_FILE "/etc/vim/gvimrc"' >> "${WORK}"/src/feature.h

    # GCC 5.3 converts type mismatches to errors.  With patchset 1402 and newer, this will cause a
    # compilation failure due to a type mismatch for _Xmblen.  Work around that by relying on the
    # header declaration.
    sed -i '/_Xmblen(char/d' "${WORK}/src/osdef2.h.in" || die "_Xmblen sed failed"

    # if we USE vim-pager, make the manpager.sh script
    if has vim-pager ${MYOPTIONS} && option vim-pager ; then
        cat <<END > "${WORK}"/runtime/macros/manpager.sh
#!/bin/sh
tr '\\267' '.' | col -b | \\
        vim \\
            -c 'let no_plugin_maps = 1' \\
            -c 'set nolist nomod ft=man' \\
            -c 'let g:showmarks_enable=0' \\
            -c 'runtime! macros/less.vim' -
END
    fi
}

vim_src_configure() {
    local myconf=()

    # Fix bug 76331: -O3 causes problems, use -O2 instead. We'll do this for
    # everyone since previous flag filtering bugs have turned out to affect
    # multiple archs...
    replace-flags -O3 -O2

    # -D_FORTIFY_SOURCE=2 breaks some valid programs, including  vim.
    # It is filtered from CFLAGS in configure but not from CPPFLAGS.
    # Submitted upstream: https://github.com/vim/vim/pull/2786
    CPPFLAGS=$(sed -e 's#-D_FORTIFY_SOURCE=2#-D_FORTIFY_SOURCE=1#g' <<< "${CPPFLAGS}")

    # make sure AC_PATH_PROG(vi_cv_path_plain_lua, lua) picks up on the right lua
    [[ "${PN}" != 'vim-runtime' ]] && option lua && \
        eval "$(eclectic lua script --sh $(lua_get_abi))"

    # Fix bug 18245: Prevent "make" from the following chain:
    # (1) Notice configure.in is newer than auto/configure
    # (2) Rebuild auto/configure
    # (3) Notice auto/configure is newer than auto/config.mk
    # (4) Run ./configure (with wrong args) to remake auto/config.mk
    edo cp src/config.mk.dist src/auto/config.mk && edo touch src/auto/config.mk
    WANT_AUTOCONF=2.5 emake -j1 -C src autoconf

    if [[ ${PN} == vim ]] && option minimal || [[ ${PN} == vim-runtime ]]; then
        myconf+=(
            --with-features=tiny
            --enable-gui=no
            --without-x
            --disable-luainterp
            --disable-perlinterp
            --disable-pythoninterp
            --disable-rubyinterp
            --disable-gpm
        )
    else
        myconf+=(
            --with-features=huge
            --enable-multibyte
            $(option_enable gpm)
            $(option_enable lua luainterp)
            $(option_enable perl perlinterp)
            $(option_enable ruby rubyinterp)
            $(option_enable cscope)
        )

        if option python; then
            if [[ $(python_get_abi) == 2.* ]]; then
                myconf+=( --enable-pythoninterp=dynamic )
                export vi_cv_path_python="${PYTHON}"
            else
                myconf+=( --enable-python3interp=dynamic )
                export vi_cv_path_python3="${PYTHON}"
            fi
        fi

        if option ruby; then
            myconf+=( --with-ruby-command=ruby$(ruby_get_abi) )
        fi

        # --with-features=huge forces on cscope even if we --disable it. We need
        # to sed this out to avoid screwiness. (1 Sep 2004 ciaranm)
        if option !cscope ; then
            edo sed -i -e '/# define FEAT_CSCOPE/d' src/feature.h
        fi

        case "${PN}" in
            vim)
            myconf+=(
                --enable-gui=no
                $(option_with x-clipboard x)
            )
            ;;
            gvim)
            myconf+=(
                --with-vim-name=gvim
                --with-x
                --enable-gtk3-check
                --enable-gui=gtk3
            )
            ;;
            *) die "vim.exlib does not understand PN=${PN}" ;;
        esac
    fi

    if [[ "${PN}" == "vim" ]] && option minimal ; then
        myconf+=( --disable-nls --disable-multibyte --disable-acl )
    else
        myconf+=( --enable-nls --disable-acl )
    fi

    myconf+=( --with-tlib=ncurses )

    myconf+=( --disable-selinux )

    # cross-compiling fixes
    myconf+=(
        vim_cv_getcwd_broken=no
        vim_cv_memmove_handles_overlap=yes
        vim_cv_stat_ignores_slash=no
        vim_cv_terminfo=yes
        vim_cv_tgetent=zero
        vim_cv_toupper_broken=no
        vim_cv_tty_group=world
    )

    # Do not prestrip binaries.
    export ac_cv_prog_STRIP="$(type -P true ) faking strip"

    myconf+=( --with-modified-by=Exherbo-${PVR} )
    econf "${myconf[@]}"
}

vim_src_compile() {
    emake -j1 -C src auto/osdef.h objects

    if [[ "${PN}" == "vim-runtime" ]] ; then
        nonfatal emake tools || die "emake tools failed"
        edo rm -f src/vim
    else
        if ! nonfatal emake ; then
            eerror "If the above messages seem to be talking about perl"
            eerror "and undefined references, please try re-emerging both"
            eerror "perl and libperl with the same USE flags. For more"
            eerror "information, see:"
            eerror "    https://bugs.gentoo.org/show_bug.cgi?id=18129"
            die "emake failed"
        fi
    fi
}

vim_src_test() {

    if ! exhost --is-native -q ; then
        echo "cross compiled host, skipping tests"
        return
    fi

    if [[ "${PN}" == "vim-runtime" ]] ; then
        echo "No testing needs to be done for vim-runtime"
        return
    fi

    einfo " "
    einfo "Starting vim tests. Several error messages will be shown "
    einfo "whilst the tests run. This is normal behaviour and does not "
    einfo "indicate a fault."
    einfo " "
    ewarn "If the tests fail, your terminal may be left in a strange "
    ewarn "state. Usually, running 'reset' will fix this."
    ewarn " "
    echo

    # Don't let vim talk to X
    unset DISPLAY

    if [[ "${PN}" == "gvim" ]] ; then
        # Make gvim not try to connect to X. See :help gui-x11-start
        # in vim for how this evil trickery works.
        # We have to make a copy of the binary since using a symlink
        # will still result in v:progpath being set to the `gvim` binary,
        # making tests that use `system(v:progpath [..])` fail because
        # DISPLAY is not set
        edo cp "${WORK}"/src/{gvim,testvim}
        testprog="${WORK}/src/testvim"

        # Make sure test49 uses testvim
        edo sed -e 's@\.\./vim@../testvim@' \
                -i src/testdir/test49.vim
    else
        testprog="${WORK}/src/vim"
    fi

    # Don't try to access sysctl
    edo sed \
        -e '/sysctl/d' \
        -i src/testdir/test_filetype.vim

    # Increase timeout to avoid flakiness when running sandboxed
    edo sed -e '/let timeout =/s:1000:5000:' \
            -i src/testdir/shared.vim

    # We've got to call make test from within testdir, since the Makefiles
    # don't pass through our VIMPROG argument
    edo cd "${WORK}"/src/testdir

    # We don't want to rebuild vim before running the tests
    edo sed -i -e 's,: \$(VIMPROG),: ,' Makefile

    # Don't try to do the additional GUI test
    emake -j1 VIMPROG=${testprog} nongui
}

vim_src_install() {
    if [[ "${PN}" == "vim-runtime" ]] ; then
        dodir /usr/{$(exhost --target)/bin,share/{man/man1,vim}}
        edo cd src
        emake \
            installruntime \
            installmanlinks \
            installmacros \
            installtutor \
            installtutorbin \
            installtools \
            install-languages \
            install-icons \
            DESTDIR="${IMAGE}" \
            MANDIR=/usr/share/man \
            DATADIR=/usr/share

        keepdir /usr/share/vim/vim${VIM_VERSION/./}/keymap

        # default vimrc is installed by vim-runtime since it applies to
        # both vim and gvim
        insinto /etc/vim/
        newins "${FILES}"/vimrc vimrc

        # These files might have slight security issues, so we won't
        # install them. See bug #77841. We don't mind if these don't
        # exist.
        rm -f "${IMAGE}"/usr/share/vim/vim${VIM_VERSION/.}/tools/{vimspell.sh,tcltags}

    elif [[ "${PN}" == "gvim" ]] ; then
        into /usr/$(exhost --target)
        dobin src/gvim
        local dest
        for dest in gvimdiff evim eview gview rgvim rgview; do
            dosym gvim /usr/$(exhost --target)/bin/${dest}
        done

        dodir /usr/share/man/man1
        dosym vim.1 /usr/share/man/man1/gvim.1
        dosym vim.1 /usr/share/man/man1/gview.1
        dosym vimdiff.1 /usr/share/man/man1/gvimdiff.1
    else
        into /usr/$(exhost --target)
        dobin src/vim
        local dest
        for dest in vimdiff rvim ex view rview; do
            dosym vim /usr/$(exhost --target)/bin/${dest}
        done
        if option vim-pager ; then
            dosym /usr/share/vim/vim${VIM_VERSION//./}/macros/less.sh /usr/$(exhost --target)/bin/vimpager
            dosym /usr/share/vim/vim${VIM_VERSION//./}/macros/manpager.sh /usr/$(exhost --target)/bin/vimmanpager
            insinto /usr/share/vim/vim${VIM_VERSION//./}/macros
            doins runtime/macros/manpager.sh
            edo chmod a+x "${IMAGE}"/usr/share/vim/vim${VIM_VERSION//./}/macros/manpager.sh
        fi
    fi

    # bash completion script, bug #79018.
    case "${PN}" in
        vim-runtime)
        dobashcompletion "${FILES}"/xxd-completion xxd
        ;;
        vim)
        dobashcompletion "${FILES}"/${PN}-completion
        ;;
    esac

    # W shouldn't be installing the ex or view man page symlinks, as they
    # are managed by eclectic
    edo rm -f "${IMAGE}"/usr/share/man/man1/{ex,view}.1
    # Same for these /usr/$(exhost --target)/bin symlinks
    edo rm -f "${IMAGE}"/usr/$(exhost --target)/bin/{ex,view}

    if [[ "${PN}" == 'vim-runtime' ]] ; then
        local f target importance=100${VIM_VERSION} alternatives files=()
        alternatives=( '_vim-runtime' "${VIM_VERSION}" "${importance}" )
        edo cd "${IMAGE}"
        files+=(
            etc/vim/vimrc usr/$(exhost --target)/bin/{vimtutor,xxd}
            $(option bash-completion && echo usr/share/bash-completion/completions/xxd)
            usr/share/applications/*.desktop
            usr/share/icons/**/*.png
        )
        for f in "${files[@]}"; do
            alternatives+=( /${f} ${f##*/}-${VIM_VERSION} )
        done
        while read f; do
            if [[ -L ${f} ]]; then
                target=$(readlink ${f})
                alternatives+=( /${f} ${target} )
                edo rm "${f}"
            elif [[ -f ${f} ]]; then
                alternatives+=( /${f} ${f##*/}-${VIM_VERSION} )
            else
                die "Unknown filetype for ${IMAGE}/${f}"
            fi
        done < <(find usr/share/man \! -type d)
        alternatives_for "${alternatives[@]}"
    else
        local importance
        [[ ${PN} == vim ]] && importance=100 || importance=5
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/$(exhost --target)/bin/vi" "${PN}"
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/share/man/man1/vi.1" 'vim.1'
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/$(exhost --target)/bin/ex" "${PN}"
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/share/man/man1/ex.1" 'vim.1'
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/$(exhost --target)/bin/view" "${PN}"
        alternatives_for 'vi' "${PN}" "${importance}" "/usr/share/man/man1/view.1" 'vim.1'
    fi
}

# Make convenience symlinks, hopefully without stepping on toes.  Some
# of these links are "owned" by the vim exheres when it is installed,
# but they might be good for gvim as well (see bug 45828)
update_vim_symlinks() {
    local f syms
    syms="vimdiff rvim rview"

    # Make or remove convenience symlink, vim -> gvim
    if [[ -f ${ROOT}/usr/$(exhost --target)/bin/gvim ]]; then
        ln -s gvim "${ROOT}"/usr/$(exhost --target)/bin/vim 2>/dev/null
    elif [[ -L ${ROOT}/usr/$(exhost --target)/bin/vim && ! -f ${ROOT}/usr/$(exhost --target)/bin/vim ]]; then
        rm "${ROOT}"/usr/$(exhost --target)/bin/vim
    fi

    # Make or remove convenience symlinks to vim
    if [[ -f ${ROOT}/usr/$(exhost --target)/bin/vim ]]; then
        for f in ${syms}; do
            ln -s vim "${ROOT}"/usr/$(exhost --target)/bin/${f} 2>/dev/null
        done
    else
        for f in ${syms}; do
            if [[ -L ${ROOT}/usr/$(exhost --target)/bin/${f} && ! -f ${ROOT}/usr/$(exhost --target)/bin/${f} ]]; then
                rm -f "${ROOT}"/usr/$(exhost --target)/bin/${f}
            fi
        done
    fi

    # This will still break if you merge then remove the vi package,
    # but there's only so much you can do, eh?  Unfortunately we don't
    # have triggers like are done in rpm-land.
}

vim_pkg_postinst() {
    # Update documentation tags (from vim-doc.exlib)
    update_vim_helptags

    alternatives_pkg_postinst

    if [[ "${PN}" != "vim-runtime" ]] ; then
        echo
        elog "To see what's new in this release, use :help version${VIM_VERSION/.*/}.txt"
    fi

    # Make convenience symlinks
    update_vim_symlinks
}

vim_pkg_prerm() {
    alternatives_pkg_prerm
}

vim_pkg_postrm() {
    # Update documentation tags (from vim-doc.exlib)
    update_vim_helptags

    # Make convenience symlinks
    update_vim_symlinks
}
